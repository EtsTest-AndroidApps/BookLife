apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'io.fabric'
apply plugin: 'com.cookpad.android.licensetools'

// Load keystore
def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

ext {
  retrofitVersion = '2.1.0'
  okhttpVersion = '3.7.0'
  rxVersion = '2.1.0'
}

android {
  compileSdkVersion 28
  buildToolsVersion '28.0.3'

  defaultConfig {
    applicationId "com.futabooo.android.booklife"
    minSdkVersion 21
    targetSdkVersion 28
    versionCode 16
    versionName "1.3.0"
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
  }

  signingConfigs {
    release {
      try {
        storeFile file(keystoreProperties['storeFile'])
        storePassword keystoreProperties['storePassword']
        keyAlias keystoreProperties['keyAlias']
        keyPassword keystoreProperties['keyPassword']
      } catch (ex) {
        throw new InvalidUserDataException(
            "You should define RELEASE_KEYSTORE_PASSWORD and " + "RELEASE_KEY_PASSWORD in gradle.properties.")
      }
    }
    debug {
      storeFile rootProject.file("debug.keystore")
      storePassword "android"
      keyAlias "androiddebugkey"
      keyPassword "android"
    }
  }

  buildTypes {
    release {
      minifyEnabled true
      debuggable false
      zipAlignEnabled true
      signingConfig signingConfigs.release
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
    debug {
      debuggable true
      zipAlignEnabled false
      signingConfig signingConfigs.debug
    }

    lintOptions { checkReleaseBuilds false }
  }

  dataBinding {
    enabled = true
  }

  sourceSets {
    main.java.srcDirs += 'src/main/kotlin'
  }
}

repositories {
  mavenCentral()
  maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
  maven { url "https://maven.fabric.io/public" }
}

dependencies {
  implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

  implementation('com.crashlytics.sdk.android:crashlytics:2.10.1@aar') {
    transitive = true
  }
  implementation('com.crashlytics.sdk.android:answers:1.4.7@aar') {
    transitive = true
  }

  implementation 'androidx.appcompat:appcompat:1.1.0'
  implementation 'com.google.android.material:material:1.0.0'

  // jsoup HTML parser library @ http://jsoup.org/
  implementation 'org.jsoup:jsoup:1.10.3'

  // http client
  implementation "com.squareup.okhttp3:okhttp:${okhttpVersion}"
  implementation "com.squareup.okhttp3:okhttp-urlconnection:${okhttpVersion}"
  implementation "com.squareup.retrofit2:retrofit:${retrofitVersion}"
  implementation "com.squareup.retrofit2:converter-gson:${retrofitVersion}"
  implementation "com.squareup.retrofit2:converter-scalars:${retrofitVersion}"
  implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'
  implementation 'com.github.franmontiel:PersistentCookieJar:v1.0.1'

  implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
  implementation "io.reactivex.rxjava2:rxjava:${rxVersion}"
  implementation "io.reactivex.rxjava2:rxkotlin:${rxVersion}"

  // data store
  implementation 'com.kazakago.cryptore:cryptore:1.2.1'

  // dagger2
  implementation 'com.google.dagger:dagger:2.11'
  kapt 'com.google.dagger:dagger-compiler:2.11'

  // images
  implementation 'com.github.bumptech.glide:glide:4.9.0'
  implementation 'jp.wasabeef:glide-transformations:4.0.0'

  // views
  implementation 'com.roughike:bottom-bar:2.1.1'
  implementation 'androidx.recyclerview:recyclerview:1.1.0'
  implementation 'androidx.cardview:cardview:1.0.0'
  implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
  implementation 'com.github.rafakob:DrawMe:0.1.6'
  implementation 'com.ogaclejapan.arclayout:library:1.1.0@aar'

  // util
  implementation 'com.jakewharton.timber:timber:4.7.1'
  implementation 'com.google.firebase:firebase-analytics:17.2.2'

  androidTestImplementation('androidx.test.espresso:espresso-core:3.1.0', {
    exclude group: 'com.android.support', module: 'support-annotations'
  })
  testImplementation 'junit:junit:4.12'
}

afterEvaluate {
  // register fabric.properties creation task
  initCrashlyticsPropertiesIfNeeded()
}

def initCrashlyticsPropertiesIfNeeded() {
  def propertiesFile = file('fabric.properties')
  if (!propertiesFile.exists()) {
    // create fabric.properties file using gradle ant task
    def commentMessage = "This is autogenerated crashlytics property from system environment to prevent key to be committed to source control."
    ant.propertyfile(file: "fabric.properties", comment: commentMessage) {
      entry(key: "apiSecret", value: crashlyticsApiSecret)
      entry(key: "apiKey", value: crashlyticsApiKey)
    }
  }
}
